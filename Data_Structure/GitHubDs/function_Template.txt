Write a function validAnagram that takes in two strings, str1 and str2,
and returns a boolean indicating whether or not str1 is an anagram of str2. 
An anagram is a word or phrase formed by rearranging the letters of a different word or phrase,
typically using all the original letters exactly once.

Implement function example

Name:         valid anagram

Assumptions:     indicating whether or not str1 is an anagram of str2   //expected context from the function


Inputs:         str1, str2

Processes:    1. validates the lengths of two strings        //specifies what should the function do like (validation)
              2. create two frequency objects of the two strings
              3. loop to check if the two object of the same key are same

outputs:    boolean           // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Write a function quickSort that takes in one array,
and returns a sorted Array. 

Implement function example

Name:         quickSort

Assumptions:     choose an pivot variable and partition the array into two subarray   //expected context from the function
                one array containing elements smaller than pivot and 
                the other containing elements bigger than pivot
                recursively apply the quick sort algorithm to the two subarrays until the entire array is sorted


Inputs:         array

Processes:    1. validate if the array is empty or have one elements return        //specifies what should the function do like (validation)
              2. choose the pivot as the first variable of the array
              3. create two empty arrays one containing variables less and greater.
              4. if the variable is less than the pivot add to to the first array
              5. if the variable is greater than the pivot add to to the second array
              6. return array of recursively


outputs:    array           // expected output of the function like(array, variables)
-----------------------------------------------------------------------------------------------------

Implement function example

Name:         countUniqueValues

//expected context from the function
Assumptions:  - takes an array which is sorted
              - return the unique numbers


Inputs:         array (sorted)

Processes:    1. validate if the array is empty
             2. return array of unique values


outputs:    array           // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Implement function example

Name:         singleNonDuplicate

//expected context from the function
Assumptions:  - takes an array which is sorted
              - return the unique numbers


Inputs:         array (sorted)

Processes:    1. validate if the array is empty
             2. return array of unique values


outputs:    array           // expected output of the function like(array, variables)


-----------------------------------------------------------------------------------------------------

Implement function example

Name:         findPair

//expected context from the function
Assumptions:  - takes an array which is sorted
              - check if array is empty
              - create two pointers to traverse in the array
              - if the two pairs adds up equal to specific target


Inputs:         array (sorted)/target (integer)

Processes:   1. validate if the array is empty
             2. create two pointers from start and end
             3. check if the sum of two pairs equals target
             4. if sum is greater than target decrement end
             5. if sum is less than target increment start

             


outputs:    array   of two values         // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Implement function example

Name:         maxSubArray

//expected context from the function
Assumptions:  - takes an array which
              - check if array is empty
              - 

Inputs:         array (sorted)/target (integer)

Processes:   1. validate if the array is empty
             2. create two pointers from start and end
             3. check if the sum of  pointers is greatest
             5. if difference between two pointers == k

             


outputs:    maxSum         // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Implement function example

Name:         binarySearchTest

//expected context from the function
Assumptions:  - takes an array which is sorted
              - create two pointers (start and end) 
              - create mid that divides (start and end)
              - check if the mid equals the target value 
              - if the mid is greater the target (decrement end) 
              - if the mid is less the target (increment start) 


Inputs:         array (sorted)/target (integer)

Processes:   1. validate if the array is empty
             2. create two pointers from start and end
             3. create mid
             3. check if the mid of pointers equals to target
             4. if mid is greater than the target (decrement end)
             5. if mid is less than the target (increment start)


             


outputs:    index of mid         // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Implement function example

Name:         searchTest

//expected context from the function
Assumptions:  - takes an sorted array 
              - create two pointers (start and end) 
              - create mid that divides (start and end)
              - check if the mid equals the target value 
              - if the mid is greater the target (decrement end) 
              - if the mid is less the target (increment start) 


Inputs:         array (sorted)/target (integer)

Processes:   1. validate if the array is empty
             2. create two pointers from start and end
             3. create mid
             3. check if the mid of pointers equals to target
             4. if mid is greater than the target (decrement end)
             5. if mid is less than the target (increment start)


             


outputs:    index of mid         // expected output of the function like(array, variables)

-----------------------------------------------------------------------------------------------------

Implement function example

Name:         collectOdd

//expected context from the function
Assumptions:  - takes an array of numbers 
              - returns new array 
              - new array contains only odd numbers


Inputs:         array 

Processes:   1. validate if the array is empty
             2. using recursion check if the number is odd and add to new array

             


outputs:    newArray         // expected output of the function like(array, variables)